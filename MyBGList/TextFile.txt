//Program.cs before changes

using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(opts =>
opts.ResolveConflictingActions(apiDesc => apiDesc.First()) /*basically telling Swagger to resolve all conflicts related
to duplicate routing handlers by always taking the first one found (and ignoring the others).*/
);

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment()) //will be only included if the app is run in the Development environment
{
    app.UseSwagger();
    app.UseSwaggerUI();
    app.UseDeveloperExceptionPage(); /* the /error string parameter, meaning that we want to handle these errors with a
    dedicated HTTP route - which now we need to implement.
    with a Controller or using the Minimal API.*/

    /* UseDeveloperExceptionPage <- captures synchronous and asynchronous exceptions from
    the HTTP pipeline and generates an HTML error page (the Developer
    Exception Page) containing several useful information regarding the
    exception, such as: stack trace, query string parameters, cookie, headers,*/
}
else
{
    app.UseExceptionHandler("/error");/* <- handles HTTPlevel
exceptions, but it’s better suited for non-development
environments since it sends all the relevant error info to a customizable
handler instead of generating a detailed error response and automatically
present it to the end-user*/
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapGet("/error", () => Results.Problem()); // handle app.UseExceptionHandler("/error") Using Minimal API
//app.MapGet("/error/test", () => { throw new Exception("test"); }); // we want to produce an error to test the way its handled

app.MapControllers();

app.Run();
