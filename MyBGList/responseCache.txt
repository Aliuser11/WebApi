[ResponseCache] attribute is part of the Microsoft.AspNetCore.Mvc namespace

The [ResponseCache] attribute can be configured using the following properties:
- Duration. Determines the max-age value of the Cache-control header,
which controls the duration (in seconds) for which the response is
cached.

- Location. Determines who can cache the response: Any if both clients
and proxies are allowed to, Private to allow clients only, or None to
disable it. These values will respectively set the public, private or nocache
directive in the Cache-control header.

- NoStore. When set to true, sets the Cache-control header value to nostore,
thus disabling the cache. This is typically used for error pages,
since they typically contain "unique" info for the specific request that
raised the error which would have no sense to cache.

example 
we're dealing with error response messages, we can use this opportunity to use the
NoStore property to prevent anyone from caching them in the following way:

app.MapGet("/error",
[EnableCors("AnyOrigin")]
[ResponseCache(NoStore = true)] () =>
Results.Problem());
app.MapGet("/error/test",
[EnableCors("AnyOrigin")]
[ResponseCache(NoStore = true)] () =>
{ throw new Exception("test"); });

BoardGamesController, => et up a public cache with a max-age of 60 seconds for that response

// ...
[HttpGet(Name = "GetBoardGames")]
[ResponseCache(Location = ResponseCacheLocation.Any, Duration = 60)]
public IEnumerable<BoardGame> Get()
// ...

Aboiut intermediate caching 

the term intermediate means that cached resources are
stored in server (or services) located between the client and the server,
instead of on the former's local drive. This leads to three important concepts:
Each cached resource can be used to serve multiple clients. This
means that intermediate cache is also a shared cache, since the same
cached response can be "hit" by several HTTP requests coming from
different peers.
The intermediate caching server must sit between the client and the
server, so that it can answer to each incoming call by either serving a
cached response (without even calling the server) or forward it to the
server (and possibly cache it for further requests).
The whole caching mechanism is transparent to clients, to the point
that they are mostly unable to tell if the response comes from the
original server or from the cache (unless the owner wants to explicitly
make them aware of that).